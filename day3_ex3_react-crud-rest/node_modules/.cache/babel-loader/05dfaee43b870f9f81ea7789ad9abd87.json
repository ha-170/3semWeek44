{"ast":null,"code":"var _jsxFileName = \"/Users/hassanainali/Dropbox/CPH business/3. semester/Flow3/Week44/day3_ex3_react-crud-rest/src/components/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport AddEditPerson from \"./AddEditPerson\";\nimport AllPersons from \"./AllPersons\";\n\nfunction App({\n  apiFacade\n}) {\n  const emptyPerson = {\n    id: \"\",\n    age: \"\",\n    name: \"\",\n    email: \"\",\n    gender: \"\"\n  };\n  const [personToAddEdit, setPersonToAddEdit] = useState(emptyPerson);\n  const [persons, setPersons] = useState([]);\n  useEffect(() => {\n    //Change the callback to populate table (rather than just console logging)\n    apiFacade.getPersons(data => {\n      console.log('DATA:', data);\n    });\n  }, []);\n\n  const storeAddEditPerson = person => {//Call this from the AddEditPerson control with the person to Add or Edit and Add/Edit via the apiFacade\n  };\n\n  const deletePerson = id => {//Call this from the AllPerson control with the id for the person to delete\n  };\n\n  const editPerson = person => {//Call thisfrom the AllPerson control with the  person to edit\n    //Set the state variable personToAddEdit with this person (a clone) to make the new value flow down via props\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"CRUD Demo \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"All Persons\"), /*#__PURE__*/React.createElement(AllPersons, {\n    persons: persons,\n    editPerson: editPerson,\n    deletePerson: deletePerson,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Add Persons\"), /*#__PURE__*/React.createElement(AddEditPerson, {\n    newPerson: personToAddEdit //  Next two lines, are if you decide to use the pattern introduced in the day-2 exercises\n    ,\n    addEditPerson: storeAddEditPerson,\n    key: personToAddEdit.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hassanainali/Dropbox/CPH business/3. semester/Flow3/Week44/day3_ex3_react-crud-rest/src/components/App.js"],"names":["React","useState","useEffect","AddEditPerson","AllPersons","App","apiFacade","emptyPerson","id","age","name","email","gender","personToAddEdit","setPersonToAddEdit","persons","setPersons","getPersons","data","console","log","storeAddEditPerson","person","deletePerson","editPerson","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA;AAAD,CAAb,EAA0B;AACxB,QAAMC,WAAW,GAAG;AAAEC,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,GAAG,EAAE,EAAf;AAAmBC,IAAAA,IAAI,EAAE,EAAzB;AAA6BC,IAAAA,KAAK,EAAE,EAApC;AAAwCC,IAAAA,MAAM,EAAE;AAAhD,GAApB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAACM,WAAD,CAAtD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,SAAS,CAACW,UAAV,CAAsBC,IAAD,IAAQ;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,IAApB;AAA2B,KAAzD;AACD,GAHQ,EAGP,EAHO,CAAT;;AAKA,QAAMG,kBAAkB,GAAIC,MAAD,IAAY,CACrC;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAIf,EAAD,IAAQ,CAC3B;AACD,GAFD;;AAIA,QAAMgB,UAAU,GAAIF,MAAD,IAAY,CAC7B;AACA;AACD,GAHD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEP,OADX;AAEE,IAAA,UAAU,EAAES,UAFd;AAGE,IAAA,YAAY,EAAED,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,eAUE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAS,EAAE;AAAb,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEZ,eADb,CAEE;AAFF;AAGE,IAAA,aAAa,EAAEQ,kBAHjB;AAIE,IAAA,GAAG,EAAER,eAAe,CAACL,EAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,CADF,CADF;AAwBD;;AACD,eAAeH,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AddEditPerson from \"./AddEditPerson\";\nimport AllPersons from \"./AllPersons\";\n\n\nfunction App({apiFacade}) {\n  const emptyPerson = { id: \"\", age: \"\", name: \"\", email: \"\", gender: \"\" };\n  const [personToAddEdit, setPersonToAddEdit] = useState(emptyPerson);\n  const [persons, setPersons] = useState([]);\n\n  useEffect(() => {\n    //Change the callback to populate table (rather than just console logging)\n    apiFacade.getPersons((data)=>{console.log('DATA:',data);});\n  },[]);\n\n  const storeAddEditPerson = (person) => {\n    //Call this from the AddEditPerson control with the person to Add or Edit and Add/Edit via the apiFacade\n  }\n\n  const deletePerson = (id) => {\n    //Call this from the AllPerson control with the id for the person to delete\n  }\n\n  const editPerson = (person) => {\n    //Call thisfrom the AllPerson control with the  person to edit\n    //Set the state variable personToAddEdit with this person (a clone) to make the new value flow down via props\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h3>CRUD Demo </h3>\n        <div className=\"col-md-7\">\n          <h3>All Persons</h3>\n          <AllPersons\n            persons={persons}\n            editPerson={editPerson}\n            deletePerson={deletePerson}\n          />\n        </div>\n        <div className=\"col-md-5\">\n          <h3 style={{ textAlign: \"center\" }}>Add Persons</h3>\n          <AddEditPerson\n            newPerson={personToAddEdit}\n            //  Next two lines, are if you decide to use the pattern introduced in the day-2 exercises\n            addEditPerson={storeAddEditPerson}\n            key={personToAddEdit.id}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}